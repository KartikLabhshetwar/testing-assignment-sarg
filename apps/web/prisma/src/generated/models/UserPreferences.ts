
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `UserPreferences` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model UserPreferences
 * 
 */
export type UserPreferencesModel = runtime.Types.Result.DefaultSelection<Prisma.$UserPreferencesPayload>

export type AggregateUserPreferences = {
  _count: UserPreferencesCountAggregateOutputType | null
  _avg: UserPreferencesAvgAggregateOutputType | null
  _sum: UserPreferencesSumAggregateOutputType | null
  _min: UserPreferencesMinAggregateOutputType | null
  _max: UserPreferencesMaxAggregateOutputType | null
}

export type UserPreferencesAvgAggregateOutputType = {
  id: number | null
}

export type UserPreferencesSumAggregateOutputType = {
  id: number | null
}

export type UserPreferencesMinAggregateOutputType = {
  id: number | null
  userId: string | null
  tableId: string | null
}

export type UserPreferencesMaxAggregateOutputType = {
  id: number | null
  userId: string | null
  tableId: string | null
}

export type UserPreferencesCountAggregateOutputType = {
  id: number
  userId: number
  tableId: number
  prefs: number
  _all: number
}


export type UserPreferencesAvgAggregateInputType = {
  id?: true
}

export type UserPreferencesSumAggregateInputType = {
  id?: true
}

export type UserPreferencesMinAggregateInputType = {
  id?: true
  userId?: true
  tableId?: true
}

export type UserPreferencesMaxAggregateInputType = {
  id?: true
  userId?: true
  tableId?: true
}

export type UserPreferencesCountAggregateInputType = {
  id?: true
  userId?: true
  tableId?: true
  prefs?: true
  _all?: true
}

export type UserPreferencesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserPreferences to aggregate.
   */
  where?: Prisma.UserPreferencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPreferences to fetch.
   */
  orderBy?: Prisma.UserPreferencesOrderByWithRelationInput | Prisma.UserPreferencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.UserPreferencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPreferences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPreferences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned UserPreferences
  **/
  _count?: true | UserPreferencesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: UserPreferencesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: UserPreferencesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: UserPreferencesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: UserPreferencesMaxAggregateInputType
}

export type GetUserPreferencesAggregateType<T extends UserPreferencesAggregateArgs> = {
      [P in keyof T & keyof AggregateUserPreferences]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateUserPreferences[P]>
    : Prisma.GetScalarType<T[P], AggregateUserPreferences[P]>
}




export type UserPreferencesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserPreferencesWhereInput
  orderBy?: Prisma.UserPreferencesOrderByWithAggregationInput | Prisma.UserPreferencesOrderByWithAggregationInput[]
  by: Prisma.UserPreferencesScalarFieldEnum[] | Prisma.UserPreferencesScalarFieldEnum
  having?: Prisma.UserPreferencesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: UserPreferencesCountAggregateInputType | true
  _avg?: UserPreferencesAvgAggregateInputType
  _sum?: UserPreferencesSumAggregateInputType
  _min?: UserPreferencesMinAggregateInputType
  _max?: UserPreferencesMaxAggregateInputType
}

export type UserPreferencesGroupByOutputType = {
  id: number
  userId: string
  tableId: string
  prefs: runtime.JsonValue
  _count: UserPreferencesCountAggregateOutputType | null
  _avg: UserPreferencesAvgAggregateOutputType | null
  _sum: UserPreferencesSumAggregateOutputType | null
  _min: UserPreferencesMinAggregateOutputType | null
  _max: UserPreferencesMaxAggregateOutputType | null
}

type GetUserPreferencesGroupByPayload<T extends UserPreferencesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<UserPreferencesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof UserPreferencesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
      }
    >
  >



export type UserPreferencesWhereInput = {
  AND?: Prisma.UserPreferencesWhereInput | Prisma.UserPreferencesWhereInput[]
  OR?: Prisma.UserPreferencesWhereInput[]
  NOT?: Prisma.UserPreferencesWhereInput | Prisma.UserPreferencesWhereInput[]
  id?: Prisma.IntFilter<"UserPreferences"> | number
  userId?: Prisma.StringFilter<"UserPreferences"> | string
  tableId?: Prisma.StringFilter<"UserPreferences"> | string
  prefs?: Prisma.JsonFilter<"UserPreferences">
}

export type UserPreferencesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  prefs?: Prisma.SortOrder
}

export type UserPreferencesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  userId_tableId?: Prisma.UserPreferencesUserIdTableIdCompoundUniqueInput
  AND?: Prisma.UserPreferencesWhereInput | Prisma.UserPreferencesWhereInput[]
  OR?: Prisma.UserPreferencesWhereInput[]
  NOT?: Prisma.UserPreferencesWhereInput | Prisma.UserPreferencesWhereInput[]
  userId?: Prisma.StringFilter<"UserPreferences"> | string
  tableId?: Prisma.StringFilter<"UserPreferences"> | string
  prefs?: Prisma.JsonFilter<"UserPreferences">
}, "id" | "userId_tableId">

export type UserPreferencesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  prefs?: Prisma.SortOrder
  _count?: Prisma.UserPreferencesCountOrderByAggregateInput
  _avg?: Prisma.UserPreferencesAvgOrderByAggregateInput
  _max?: Prisma.UserPreferencesMaxOrderByAggregateInput
  _min?: Prisma.UserPreferencesMinOrderByAggregateInput
  _sum?: Prisma.UserPreferencesSumOrderByAggregateInput
}

export type UserPreferencesScalarWhereWithAggregatesInput = {
  AND?: Prisma.UserPreferencesScalarWhereWithAggregatesInput | Prisma.UserPreferencesScalarWhereWithAggregatesInput[]
  OR?: Prisma.UserPreferencesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.UserPreferencesScalarWhereWithAggregatesInput | Prisma.UserPreferencesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"UserPreferences"> | number
  userId?: Prisma.StringWithAggregatesFilter<"UserPreferences"> | string
  tableId?: Prisma.StringWithAggregatesFilter<"UserPreferences"> | string
  prefs?: Prisma.JsonWithAggregatesFilter<"UserPreferences">
}

export type UserPreferencesCreateInput = {
  userId: string
  tableId: string
  prefs: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type UserPreferencesUncheckedCreateInput = {
  id?: number
  userId: string
  tableId: string
  prefs: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type UserPreferencesUpdateInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  tableId?: Prisma.StringFieldUpdateOperationsInput | string
  prefs?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type UserPreferencesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  tableId?: Prisma.StringFieldUpdateOperationsInput | string
  prefs?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type UserPreferencesCreateManyInput = {
  id?: number
  userId: string
  tableId: string
  prefs: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type UserPreferencesUpdateManyMutationInput = {
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  tableId?: Prisma.StringFieldUpdateOperationsInput | string
  prefs?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type UserPreferencesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  tableId?: Prisma.StringFieldUpdateOperationsInput | string
  prefs?: Prisma.JsonNullValueInput | runtime.InputJsonValue
}

export type UserPreferencesUserIdTableIdCompoundUniqueInput = {
  userId: string
  tableId: string
}

export type UserPreferencesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  prefs?: Prisma.SortOrder
}

export type UserPreferencesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type UserPreferencesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
}

export type UserPreferencesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
}

export type UserPreferencesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type UserPreferencesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  tableId?: boolean
  prefs?: boolean
}, ExtArgs["result"]["userPreferences"]>

export type UserPreferencesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  tableId?: boolean
  prefs?: boolean
}, ExtArgs["result"]["userPreferences"]>

export type UserPreferencesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  tableId?: boolean
  prefs?: boolean
}, ExtArgs["result"]["userPreferences"]>

export type UserPreferencesSelectScalar = {
  id?: boolean
  userId?: boolean
  tableId?: boolean
  prefs?: boolean
}

export type UserPreferencesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "tableId" | "prefs", ExtArgs["result"]["userPreferences"]>

export type $UserPreferencesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "UserPreferences"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: string
    tableId: string
    prefs: runtime.JsonValue
  }, ExtArgs["result"]["userPreferences"]>
  composites: {}
}

export type UserPreferencesGetPayload<S extends boolean | null | undefined | UserPreferencesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload, S>

export type UserPreferencesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<UserPreferencesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: UserPreferencesCountAggregateInputType | true
  }

export interface UserPreferencesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPreferences'], meta: { name: 'UserPreferences' } }
  /**
   * Find zero or one UserPreferences that matches the filter.
   * @param {UserPreferencesFindUniqueArgs} args - Arguments to find a UserPreferences
   * @example
   * // Get one UserPreferences
   * const userPreferences = await prisma.userPreferences.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends UserPreferencesFindUniqueArgs>(args: Prisma.SelectSubset<T, UserPreferencesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__UserPreferencesClient<runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one UserPreferences that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {UserPreferencesFindUniqueOrThrowArgs} args - Arguments to find a UserPreferences
   * @example
   * // Get one UserPreferences
   * const userPreferences = await prisma.userPreferences.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends UserPreferencesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, UserPreferencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserPreferencesClient<runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserPreferences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPreferencesFindFirstArgs} args - Arguments to find a UserPreferences
   * @example
   * // Get one UserPreferences
   * const userPreferences = await prisma.userPreferences.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends UserPreferencesFindFirstArgs>(args?: Prisma.SelectSubset<T, UserPreferencesFindFirstArgs<ExtArgs>>): Prisma.Prisma__UserPreferencesClient<runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first UserPreferences that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPreferencesFindFirstOrThrowArgs} args - Arguments to find a UserPreferences
   * @example
   * // Get one UserPreferences
   * const userPreferences = await prisma.userPreferences.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends UserPreferencesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, UserPreferencesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__UserPreferencesClient<runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more UserPreferences that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPreferencesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserPreferences
   * const userPreferences = await prisma.userPreferences.findMany()
   * 
   * // Get first 10 UserPreferences
   * const userPreferences = await prisma.userPreferences.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userPreferencesWithIdOnly = await prisma.userPreferences.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends UserPreferencesFindManyArgs>(args?: Prisma.SelectSubset<T, UserPreferencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a UserPreferences.
   * @param {UserPreferencesCreateArgs} args - Arguments to create a UserPreferences.
   * @example
   * // Create one UserPreferences
   * const UserPreferences = await prisma.userPreferences.create({
   *   data: {
   *     // ... data to create a UserPreferences
   *   }
   * })
   * 
   */
  create<T extends UserPreferencesCreateArgs>(args: Prisma.SelectSubset<T, UserPreferencesCreateArgs<ExtArgs>>): Prisma.Prisma__UserPreferencesClient<runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many UserPreferences.
   * @param {UserPreferencesCreateManyArgs} args - Arguments to create many UserPreferences.
   * @example
   * // Create many UserPreferences
   * const userPreferences = await prisma.userPreferences.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends UserPreferencesCreateManyArgs>(args?: Prisma.SelectSubset<T, UserPreferencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many UserPreferences and returns the data saved in the database.
   * @param {UserPreferencesCreateManyAndReturnArgs} args - Arguments to create many UserPreferences.
   * @example
   * // Create many UserPreferences
   * const userPreferences = await prisma.userPreferences.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many UserPreferences and only return the `id`
   * const userPreferencesWithIdOnly = await prisma.userPreferences.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends UserPreferencesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, UserPreferencesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a UserPreferences.
   * @param {UserPreferencesDeleteArgs} args - Arguments to delete one UserPreferences.
   * @example
   * // Delete one UserPreferences
   * const UserPreferences = await prisma.userPreferences.delete({
   *   where: {
   *     // ... filter to delete one UserPreferences
   *   }
   * })
   * 
   */
  delete<T extends UserPreferencesDeleteArgs>(args: Prisma.SelectSubset<T, UserPreferencesDeleteArgs<ExtArgs>>): Prisma.Prisma__UserPreferencesClient<runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one UserPreferences.
   * @param {UserPreferencesUpdateArgs} args - Arguments to update one UserPreferences.
   * @example
   * // Update one UserPreferences
   * const userPreferences = await prisma.userPreferences.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends UserPreferencesUpdateArgs>(args: Prisma.SelectSubset<T, UserPreferencesUpdateArgs<ExtArgs>>): Prisma.Prisma__UserPreferencesClient<runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more UserPreferences.
   * @param {UserPreferencesDeleteManyArgs} args - Arguments to filter UserPreferences to delete.
   * @example
   * // Delete a few UserPreferences
   * const { count } = await prisma.userPreferences.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends UserPreferencesDeleteManyArgs>(args?: Prisma.SelectSubset<T, UserPreferencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserPreferences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPreferencesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserPreferences
   * const userPreferences = await prisma.userPreferences.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends UserPreferencesUpdateManyArgs>(args: Prisma.SelectSubset<T, UserPreferencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more UserPreferences and returns the data updated in the database.
   * @param {UserPreferencesUpdateManyAndReturnArgs} args - Arguments to update many UserPreferences.
   * @example
   * // Update many UserPreferences
   * const userPreferences = await prisma.userPreferences.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more UserPreferences and only return the `id`
   * const userPreferencesWithIdOnly = await prisma.userPreferences.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends UserPreferencesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, UserPreferencesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one UserPreferences.
   * @param {UserPreferencesUpsertArgs} args - Arguments to update or create a UserPreferences.
   * @example
   * // Update or create a UserPreferences
   * const userPreferences = await prisma.userPreferences.upsert({
   *   create: {
   *     // ... data to create a UserPreferences
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserPreferences we want to update
   *   }
   * })
   */
  upsert<T extends UserPreferencesUpsertArgs>(args: Prisma.SelectSubset<T, UserPreferencesUpsertArgs<ExtArgs>>): Prisma.Prisma__UserPreferencesClient<runtime.Types.Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of UserPreferences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPreferencesCountArgs} args - Arguments to filter UserPreferences to count.
   * @example
   * // Count the number of UserPreferences
   * const count = await prisma.userPreferences.count({
   *   where: {
   *     // ... the filter for the UserPreferences we want to count
   *   }
   * })
  **/
  count<T extends UserPreferencesCountArgs>(
    args?: Prisma.Subset<T, UserPreferencesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], UserPreferencesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a UserPreferences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPreferencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends UserPreferencesAggregateArgs>(args: Prisma.Subset<T, UserPreferencesAggregateArgs>): Prisma.PrismaPromise<GetUserPreferencesAggregateType<T>>

  /**
   * Group by UserPreferences.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {UserPreferencesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends UserPreferencesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: UserPreferencesGroupByArgs['orderBy'] }
      : { orderBy?: UserPreferencesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, UserPreferencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPreferencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the UserPreferences model
 */
readonly fields: UserPreferencesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for UserPreferences.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__UserPreferencesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the UserPreferences model
 */
export interface UserPreferencesFieldRefs {
  readonly id: Prisma.FieldRef<"UserPreferences", 'Int'>
  readonly userId: Prisma.FieldRef<"UserPreferences", 'String'>
  readonly tableId: Prisma.FieldRef<"UserPreferences", 'String'>
  readonly prefs: Prisma.FieldRef<"UserPreferences", 'Json'>
}
    

// Custom InputTypes
/**
 * UserPreferences findUnique
 */
export type UserPreferencesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
  /**
   * Filter, which UserPreferences to fetch.
   */
  where: Prisma.UserPreferencesWhereUniqueInput
}

/**
 * UserPreferences findUniqueOrThrow
 */
export type UserPreferencesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
  /**
   * Filter, which UserPreferences to fetch.
   */
  where: Prisma.UserPreferencesWhereUniqueInput
}

/**
 * UserPreferences findFirst
 */
export type UserPreferencesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
  /**
   * Filter, which UserPreferences to fetch.
   */
  where?: Prisma.UserPreferencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPreferences to fetch.
   */
  orderBy?: Prisma.UserPreferencesOrderByWithRelationInput | Prisma.UserPreferencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserPreferences.
   */
  cursor?: Prisma.UserPreferencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPreferences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPreferences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserPreferences.
   */
  distinct?: Prisma.UserPreferencesScalarFieldEnum | Prisma.UserPreferencesScalarFieldEnum[]
}

/**
 * UserPreferences findFirstOrThrow
 */
export type UserPreferencesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
  /**
   * Filter, which UserPreferences to fetch.
   */
  where?: Prisma.UserPreferencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPreferences to fetch.
   */
  orderBy?: Prisma.UserPreferencesOrderByWithRelationInput | Prisma.UserPreferencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for UserPreferences.
   */
  cursor?: Prisma.UserPreferencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPreferences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPreferences.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of UserPreferences.
   */
  distinct?: Prisma.UserPreferencesScalarFieldEnum | Prisma.UserPreferencesScalarFieldEnum[]
}

/**
 * UserPreferences findMany
 */
export type UserPreferencesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
  /**
   * Filter, which UserPreferences to fetch.
   */
  where?: Prisma.UserPreferencesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of UserPreferences to fetch.
   */
  orderBy?: Prisma.UserPreferencesOrderByWithRelationInput | Prisma.UserPreferencesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing UserPreferences.
   */
  cursor?: Prisma.UserPreferencesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` UserPreferences from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` UserPreferences.
   */
  skip?: number
  distinct?: Prisma.UserPreferencesScalarFieldEnum | Prisma.UserPreferencesScalarFieldEnum[]
}

/**
 * UserPreferences create
 */
export type UserPreferencesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
  /**
   * The data needed to create a UserPreferences.
   */
  data: Prisma.XOR<Prisma.UserPreferencesCreateInput, Prisma.UserPreferencesUncheckedCreateInput>
}

/**
 * UserPreferences createMany
 */
export type UserPreferencesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many UserPreferences.
   */
  data: Prisma.UserPreferencesCreateManyInput | Prisma.UserPreferencesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserPreferences createManyAndReturn
 */
export type UserPreferencesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
  /**
   * The data used to create many UserPreferences.
   */
  data: Prisma.UserPreferencesCreateManyInput | Prisma.UserPreferencesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * UserPreferences update
 */
export type UserPreferencesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
  /**
   * The data needed to update a UserPreferences.
   */
  data: Prisma.XOR<Prisma.UserPreferencesUpdateInput, Prisma.UserPreferencesUncheckedUpdateInput>
  /**
   * Choose, which UserPreferences to update.
   */
  where: Prisma.UserPreferencesWhereUniqueInput
}

/**
 * UserPreferences updateMany
 */
export type UserPreferencesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update UserPreferences.
   */
  data: Prisma.XOR<Prisma.UserPreferencesUpdateManyMutationInput, Prisma.UserPreferencesUncheckedUpdateManyInput>
  /**
   * Filter which UserPreferences to update
   */
  where?: Prisma.UserPreferencesWhereInput
  /**
   * Limit how many UserPreferences to update.
   */
  limit?: number
}

/**
 * UserPreferences updateManyAndReturn
 */
export type UserPreferencesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
  /**
   * The data used to update UserPreferences.
   */
  data: Prisma.XOR<Prisma.UserPreferencesUpdateManyMutationInput, Prisma.UserPreferencesUncheckedUpdateManyInput>
  /**
   * Filter which UserPreferences to update
   */
  where?: Prisma.UserPreferencesWhereInput
  /**
   * Limit how many UserPreferences to update.
   */
  limit?: number
}

/**
 * UserPreferences upsert
 */
export type UserPreferencesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
  /**
   * The filter to search for the UserPreferences to update in case it exists.
   */
  where: Prisma.UserPreferencesWhereUniqueInput
  /**
   * In case the UserPreferences found by the `where` argument doesn't exist, create a new UserPreferences with this data.
   */
  create: Prisma.XOR<Prisma.UserPreferencesCreateInput, Prisma.UserPreferencesUncheckedCreateInput>
  /**
   * In case the UserPreferences was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.UserPreferencesUpdateInput, Prisma.UserPreferencesUncheckedUpdateInput>
}

/**
 * UserPreferences delete
 */
export type UserPreferencesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
  /**
   * Filter which UserPreferences to delete.
   */
  where: Prisma.UserPreferencesWhereUniqueInput
}

/**
 * UserPreferences deleteMany
 */
export type UserPreferencesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which UserPreferences to delete
   */
  where?: Prisma.UserPreferencesWhereInput
  /**
   * Limit how many UserPreferences to delete.
   */
  limit?: number
}

/**
 * UserPreferences without action
 */
export type UserPreferencesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the UserPreferences
   */
  select?: Prisma.UserPreferencesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the UserPreferences
   */
  omit?: Prisma.UserPreferencesOmit<ExtArgs> | null
}
