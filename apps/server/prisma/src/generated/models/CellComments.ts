
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `CellComments` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model CellComments
 * 
 */
export type CellCommentsModel = runtime.Types.Result.DefaultSelection<Prisma.$CellCommentsPayload>

export type AggregateCellComments = {
  _count: CellCommentsCountAggregateOutputType | null
  _avg: CellCommentsAvgAggregateOutputType | null
  _sum: CellCommentsSumAggregateOutputType | null
  _min: CellCommentsMinAggregateOutputType | null
  _max: CellCommentsMaxAggregateOutputType | null
}

export type CellCommentsAvgAggregateOutputType = {
  id: number | null
}

export type CellCommentsSumAggregateOutputType = {
  id: number | null
}

export type CellCommentsMinAggregateOutputType = {
  id: number | null
  tableId: string | null
  rowId: string | null
  columnId: string | null
  userId: string | null
  content: string | null
  timestamp: Date | null
}

export type CellCommentsMaxAggregateOutputType = {
  id: number | null
  tableId: string | null
  rowId: string | null
  columnId: string | null
  userId: string | null
  content: string | null
  timestamp: Date | null
}

export type CellCommentsCountAggregateOutputType = {
  id: number
  tableId: number
  rowId: number
  columnId: number
  userId: number
  content: number
  timestamp: number
  _all: number
}


export type CellCommentsAvgAggregateInputType = {
  id?: true
}

export type CellCommentsSumAggregateInputType = {
  id?: true
}

export type CellCommentsMinAggregateInputType = {
  id?: true
  tableId?: true
  rowId?: true
  columnId?: true
  userId?: true
  content?: true
  timestamp?: true
}

export type CellCommentsMaxAggregateInputType = {
  id?: true
  tableId?: true
  rowId?: true
  columnId?: true
  userId?: true
  content?: true
  timestamp?: true
}

export type CellCommentsCountAggregateInputType = {
  id?: true
  tableId?: true
  rowId?: true
  columnId?: true
  userId?: true
  content?: true
  timestamp?: true
  _all?: true
}

export type CellCommentsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CellComments to aggregate.
   */
  where?: Prisma.CellCommentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CellComments to fetch.
   */
  orderBy?: Prisma.CellCommentsOrderByWithRelationInput | Prisma.CellCommentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.CellCommentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CellComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CellComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned CellComments
  **/
  _count?: true | CellCommentsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: CellCommentsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: CellCommentsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CellCommentsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CellCommentsMaxAggregateInputType
}

export type GetCellCommentsAggregateType<T extends CellCommentsAggregateArgs> = {
      [P in keyof T & keyof AggregateCellComments]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCellComments[P]>
    : Prisma.GetScalarType<T[P], AggregateCellComments[P]>
}




export type CellCommentsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.CellCommentsWhereInput
  orderBy?: Prisma.CellCommentsOrderByWithAggregationInput | Prisma.CellCommentsOrderByWithAggregationInput[]
  by: Prisma.CellCommentsScalarFieldEnum[] | Prisma.CellCommentsScalarFieldEnum
  having?: Prisma.CellCommentsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CellCommentsCountAggregateInputType | true
  _avg?: CellCommentsAvgAggregateInputType
  _sum?: CellCommentsSumAggregateInputType
  _min?: CellCommentsMinAggregateInputType
  _max?: CellCommentsMaxAggregateInputType
}

export type CellCommentsGroupByOutputType = {
  id: number
  tableId: string
  rowId: string
  columnId: string
  userId: string
  content: string
  timestamp: Date
  _count: CellCommentsCountAggregateOutputType | null
  _avg: CellCommentsAvgAggregateOutputType | null
  _sum: CellCommentsSumAggregateOutputType | null
  _min: CellCommentsMinAggregateOutputType | null
  _max: CellCommentsMaxAggregateOutputType | null
}

type GetCellCommentsGroupByPayload<T extends CellCommentsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CellCommentsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CellCommentsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CellCommentsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CellCommentsGroupByOutputType[P]>
      }
    >
  >



export type CellCommentsWhereInput = {
  AND?: Prisma.CellCommentsWhereInput | Prisma.CellCommentsWhereInput[]
  OR?: Prisma.CellCommentsWhereInput[]
  NOT?: Prisma.CellCommentsWhereInput | Prisma.CellCommentsWhereInput[]
  id?: Prisma.IntFilter<"CellComments"> | number
  tableId?: Prisma.StringFilter<"CellComments"> | string
  rowId?: Prisma.StringFilter<"CellComments"> | string
  columnId?: Prisma.StringFilter<"CellComments"> | string
  userId?: Prisma.StringFilter<"CellComments"> | string
  content?: Prisma.StringFilter<"CellComments"> | string
  timestamp?: Prisma.DateTimeFilter<"CellComments"> | Date | string
}

export type CellCommentsOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  rowId?: Prisma.SortOrder
  columnId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type CellCommentsWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.CellCommentsWhereInput | Prisma.CellCommentsWhereInput[]
  OR?: Prisma.CellCommentsWhereInput[]
  NOT?: Prisma.CellCommentsWhereInput | Prisma.CellCommentsWhereInput[]
  tableId?: Prisma.StringFilter<"CellComments"> | string
  rowId?: Prisma.StringFilter<"CellComments"> | string
  columnId?: Prisma.StringFilter<"CellComments"> | string
  userId?: Prisma.StringFilter<"CellComments"> | string
  content?: Prisma.StringFilter<"CellComments"> | string
  timestamp?: Prisma.DateTimeFilter<"CellComments"> | Date | string
}, "id">

export type CellCommentsOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  rowId?: Prisma.SortOrder
  columnId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  _count?: Prisma.CellCommentsCountOrderByAggregateInput
  _avg?: Prisma.CellCommentsAvgOrderByAggregateInput
  _max?: Prisma.CellCommentsMaxOrderByAggregateInput
  _min?: Prisma.CellCommentsMinOrderByAggregateInput
  _sum?: Prisma.CellCommentsSumOrderByAggregateInput
}

export type CellCommentsScalarWhereWithAggregatesInput = {
  AND?: Prisma.CellCommentsScalarWhereWithAggregatesInput | Prisma.CellCommentsScalarWhereWithAggregatesInput[]
  OR?: Prisma.CellCommentsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.CellCommentsScalarWhereWithAggregatesInput | Prisma.CellCommentsScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"CellComments"> | number
  tableId?: Prisma.StringWithAggregatesFilter<"CellComments"> | string
  rowId?: Prisma.StringWithAggregatesFilter<"CellComments"> | string
  columnId?: Prisma.StringWithAggregatesFilter<"CellComments"> | string
  userId?: Prisma.StringWithAggregatesFilter<"CellComments"> | string
  content?: Prisma.StringWithAggregatesFilter<"CellComments"> | string
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"CellComments"> | Date | string
}

export type CellCommentsCreateInput = {
  tableId: string
  rowId: string
  columnId: string
  userId: string
  content: string
  timestamp?: Date | string
}

export type CellCommentsUncheckedCreateInput = {
  id?: number
  tableId: string
  rowId: string
  columnId: string
  userId: string
  content: string
  timestamp?: Date | string
}

export type CellCommentsUpdateInput = {
  tableId?: Prisma.StringFieldUpdateOperationsInput | string
  rowId?: Prisma.StringFieldUpdateOperationsInput | string
  columnId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CellCommentsUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tableId?: Prisma.StringFieldUpdateOperationsInput | string
  rowId?: Prisma.StringFieldUpdateOperationsInput | string
  columnId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CellCommentsCreateManyInput = {
  id?: number
  tableId: string
  rowId: string
  columnId: string
  userId: string
  content: string
  timestamp?: Date | string
}

export type CellCommentsUpdateManyMutationInput = {
  tableId?: Prisma.StringFieldUpdateOperationsInput | string
  rowId?: Prisma.StringFieldUpdateOperationsInput | string
  columnId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CellCommentsUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  tableId?: Prisma.StringFieldUpdateOperationsInput | string
  rowId?: Prisma.StringFieldUpdateOperationsInput | string
  columnId?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  content?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CellCommentsCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  rowId?: Prisma.SortOrder
  columnId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type CellCommentsAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type CellCommentsMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  rowId?: Prisma.SortOrder
  columnId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type CellCommentsMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  tableId?: Prisma.SortOrder
  rowId?: Prisma.SortOrder
  columnId?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
}

export type CellCommentsSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}



export type CellCommentsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tableId?: boolean
  rowId?: boolean
  columnId?: boolean
  userId?: boolean
  content?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["cellComments"]>

export type CellCommentsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tableId?: boolean
  rowId?: boolean
  columnId?: boolean
  userId?: boolean
  content?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["cellComments"]>

export type CellCommentsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  tableId?: boolean
  rowId?: boolean
  columnId?: boolean
  userId?: boolean
  content?: boolean
  timestamp?: boolean
}, ExtArgs["result"]["cellComments"]>

export type CellCommentsSelectScalar = {
  id?: boolean
  tableId?: boolean
  rowId?: boolean
  columnId?: boolean
  userId?: boolean
  content?: boolean
  timestamp?: boolean
}

export type CellCommentsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "tableId" | "rowId" | "columnId" | "userId" | "content" | "timestamp", ExtArgs["result"]["cellComments"]>

export type $CellCommentsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "CellComments"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    tableId: string
    rowId: string
    columnId: string
    userId: string
    content: string
    timestamp: Date
  }, ExtArgs["result"]["cellComments"]>
  composites: {}
}

export type CellCommentsGetPayload<S extends boolean | null | undefined | CellCommentsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload, S>

export type CellCommentsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<CellCommentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CellCommentsCountAggregateInputType | true
  }

export interface CellCommentsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CellComments'], meta: { name: 'CellComments' } }
  /**
   * Find zero or one CellComments that matches the filter.
   * @param {CellCommentsFindUniqueArgs} args - Arguments to find a CellComments
   * @example
   * // Get one CellComments
   * const cellComments = await prisma.cellComments.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends CellCommentsFindUniqueArgs>(args: Prisma.SelectSubset<T, CellCommentsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__CellCommentsClient<runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one CellComments that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {CellCommentsFindUniqueOrThrowArgs} args - Arguments to find a CellComments
   * @example
   * // Get one CellComments
   * const cellComments = await prisma.cellComments.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends CellCommentsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, CellCommentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__CellCommentsClient<runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CellComments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CellCommentsFindFirstArgs} args - Arguments to find a CellComments
   * @example
   * // Get one CellComments
   * const cellComments = await prisma.cellComments.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends CellCommentsFindFirstArgs>(args?: Prisma.SelectSubset<T, CellCommentsFindFirstArgs<ExtArgs>>): Prisma.Prisma__CellCommentsClient<runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first CellComments that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CellCommentsFindFirstOrThrowArgs} args - Arguments to find a CellComments
   * @example
   * // Get one CellComments
   * const cellComments = await prisma.cellComments.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends CellCommentsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, CellCommentsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__CellCommentsClient<runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more CellComments that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CellCommentsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all CellComments
   * const cellComments = await prisma.cellComments.findMany()
   * 
   * // Get first 10 CellComments
   * const cellComments = await prisma.cellComments.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const cellCommentsWithIdOnly = await prisma.cellComments.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends CellCommentsFindManyArgs>(args?: Prisma.SelectSubset<T, CellCommentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a CellComments.
   * @param {CellCommentsCreateArgs} args - Arguments to create a CellComments.
   * @example
   * // Create one CellComments
   * const CellComments = await prisma.cellComments.create({
   *   data: {
   *     // ... data to create a CellComments
   *   }
   * })
   * 
   */
  create<T extends CellCommentsCreateArgs>(args: Prisma.SelectSubset<T, CellCommentsCreateArgs<ExtArgs>>): Prisma.Prisma__CellCommentsClient<runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many CellComments.
   * @param {CellCommentsCreateManyArgs} args - Arguments to create many CellComments.
   * @example
   * // Create many CellComments
   * const cellComments = await prisma.cellComments.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends CellCommentsCreateManyArgs>(args?: Prisma.SelectSubset<T, CellCommentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many CellComments and returns the data saved in the database.
   * @param {CellCommentsCreateManyAndReturnArgs} args - Arguments to create many CellComments.
   * @example
   * // Create many CellComments
   * const cellComments = await prisma.cellComments.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many CellComments and only return the `id`
   * const cellCommentsWithIdOnly = await prisma.cellComments.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends CellCommentsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, CellCommentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a CellComments.
   * @param {CellCommentsDeleteArgs} args - Arguments to delete one CellComments.
   * @example
   * // Delete one CellComments
   * const CellComments = await prisma.cellComments.delete({
   *   where: {
   *     // ... filter to delete one CellComments
   *   }
   * })
   * 
   */
  delete<T extends CellCommentsDeleteArgs>(args: Prisma.SelectSubset<T, CellCommentsDeleteArgs<ExtArgs>>): Prisma.Prisma__CellCommentsClient<runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one CellComments.
   * @param {CellCommentsUpdateArgs} args - Arguments to update one CellComments.
   * @example
   * // Update one CellComments
   * const cellComments = await prisma.cellComments.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends CellCommentsUpdateArgs>(args: Prisma.SelectSubset<T, CellCommentsUpdateArgs<ExtArgs>>): Prisma.Prisma__CellCommentsClient<runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more CellComments.
   * @param {CellCommentsDeleteManyArgs} args - Arguments to filter CellComments to delete.
   * @example
   * // Delete a few CellComments
   * const { count } = await prisma.cellComments.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends CellCommentsDeleteManyArgs>(args?: Prisma.SelectSubset<T, CellCommentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CellComments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CellCommentsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many CellComments
   * const cellComments = await prisma.cellComments.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends CellCommentsUpdateManyArgs>(args: Prisma.SelectSubset<T, CellCommentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more CellComments and returns the data updated in the database.
   * @param {CellCommentsUpdateManyAndReturnArgs} args - Arguments to update many CellComments.
   * @example
   * // Update many CellComments
   * const cellComments = await prisma.cellComments.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more CellComments and only return the `id`
   * const cellCommentsWithIdOnly = await prisma.cellComments.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends CellCommentsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, CellCommentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one CellComments.
   * @param {CellCommentsUpsertArgs} args - Arguments to update or create a CellComments.
   * @example
   * // Update or create a CellComments
   * const cellComments = await prisma.cellComments.upsert({
   *   create: {
   *     // ... data to create a CellComments
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the CellComments we want to update
   *   }
   * })
   */
  upsert<T extends CellCommentsUpsertArgs>(args: Prisma.SelectSubset<T, CellCommentsUpsertArgs<ExtArgs>>): Prisma.Prisma__CellCommentsClient<runtime.Types.Result.GetResult<Prisma.$CellCommentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of CellComments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CellCommentsCountArgs} args - Arguments to filter CellComments to count.
   * @example
   * // Count the number of CellComments
   * const count = await prisma.cellComments.count({
   *   where: {
   *     // ... the filter for the CellComments we want to count
   *   }
   * })
  **/
  count<T extends CellCommentsCountArgs>(
    args?: Prisma.Subset<T, CellCommentsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CellCommentsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a CellComments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CellCommentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CellCommentsAggregateArgs>(args: Prisma.Subset<T, CellCommentsAggregateArgs>): Prisma.PrismaPromise<GetCellCommentsAggregateType<T>>

  /**
   * Group by CellComments.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CellCommentsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends CellCommentsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: CellCommentsGroupByArgs['orderBy'] }
      : { orderBy?: CellCommentsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, CellCommentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCellCommentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the CellComments model
 */
readonly fields: CellCommentsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for CellComments.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__CellCommentsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the CellComments model
 */
export interface CellCommentsFieldRefs {
  readonly id: Prisma.FieldRef<"CellComments", 'Int'>
  readonly tableId: Prisma.FieldRef<"CellComments", 'String'>
  readonly rowId: Prisma.FieldRef<"CellComments", 'String'>
  readonly columnId: Prisma.FieldRef<"CellComments", 'String'>
  readonly userId: Prisma.FieldRef<"CellComments", 'String'>
  readonly content: Prisma.FieldRef<"CellComments", 'String'>
  readonly timestamp: Prisma.FieldRef<"CellComments", 'DateTime'>
}
    

// Custom InputTypes
/**
 * CellComments findUnique
 */
export type CellCommentsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
  /**
   * Filter, which CellComments to fetch.
   */
  where: Prisma.CellCommentsWhereUniqueInput
}

/**
 * CellComments findUniqueOrThrow
 */
export type CellCommentsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
  /**
   * Filter, which CellComments to fetch.
   */
  where: Prisma.CellCommentsWhereUniqueInput
}

/**
 * CellComments findFirst
 */
export type CellCommentsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
  /**
   * Filter, which CellComments to fetch.
   */
  where?: Prisma.CellCommentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CellComments to fetch.
   */
  orderBy?: Prisma.CellCommentsOrderByWithRelationInput | Prisma.CellCommentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CellComments.
   */
  cursor?: Prisma.CellCommentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CellComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CellComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CellComments.
   */
  distinct?: Prisma.CellCommentsScalarFieldEnum | Prisma.CellCommentsScalarFieldEnum[]
}

/**
 * CellComments findFirstOrThrow
 */
export type CellCommentsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
  /**
   * Filter, which CellComments to fetch.
   */
  where?: Prisma.CellCommentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CellComments to fetch.
   */
  orderBy?: Prisma.CellCommentsOrderByWithRelationInput | Prisma.CellCommentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for CellComments.
   */
  cursor?: Prisma.CellCommentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CellComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CellComments.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of CellComments.
   */
  distinct?: Prisma.CellCommentsScalarFieldEnum | Prisma.CellCommentsScalarFieldEnum[]
}

/**
 * CellComments findMany
 */
export type CellCommentsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
  /**
   * Filter, which CellComments to fetch.
   */
  where?: Prisma.CellCommentsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of CellComments to fetch.
   */
  orderBy?: Prisma.CellCommentsOrderByWithRelationInput | Prisma.CellCommentsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing CellComments.
   */
  cursor?: Prisma.CellCommentsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` CellComments from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` CellComments.
   */
  skip?: number
  distinct?: Prisma.CellCommentsScalarFieldEnum | Prisma.CellCommentsScalarFieldEnum[]
}

/**
 * CellComments create
 */
export type CellCommentsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
  /**
   * The data needed to create a CellComments.
   */
  data: Prisma.XOR<Prisma.CellCommentsCreateInput, Prisma.CellCommentsUncheckedCreateInput>
}

/**
 * CellComments createMany
 */
export type CellCommentsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many CellComments.
   */
  data: Prisma.CellCommentsCreateManyInput | Prisma.CellCommentsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CellComments createManyAndReturn
 */
export type CellCommentsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
  /**
   * The data used to create many CellComments.
   */
  data: Prisma.CellCommentsCreateManyInput | Prisma.CellCommentsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * CellComments update
 */
export type CellCommentsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
  /**
   * The data needed to update a CellComments.
   */
  data: Prisma.XOR<Prisma.CellCommentsUpdateInput, Prisma.CellCommentsUncheckedUpdateInput>
  /**
   * Choose, which CellComments to update.
   */
  where: Prisma.CellCommentsWhereUniqueInput
}

/**
 * CellComments updateMany
 */
export type CellCommentsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update CellComments.
   */
  data: Prisma.XOR<Prisma.CellCommentsUpdateManyMutationInput, Prisma.CellCommentsUncheckedUpdateManyInput>
  /**
   * Filter which CellComments to update
   */
  where?: Prisma.CellCommentsWhereInput
  /**
   * Limit how many CellComments to update.
   */
  limit?: number
}

/**
 * CellComments updateManyAndReturn
 */
export type CellCommentsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
  /**
   * The data used to update CellComments.
   */
  data: Prisma.XOR<Prisma.CellCommentsUpdateManyMutationInput, Prisma.CellCommentsUncheckedUpdateManyInput>
  /**
   * Filter which CellComments to update
   */
  where?: Prisma.CellCommentsWhereInput
  /**
   * Limit how many CellComments to update.
   */
  limit?: number
}

/**
 * CellComments upsert
 */
export type CellCommentsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
  /**
   * The filter to search for the CellComments to update in case it exists.
   */
  where: Prisma.CellCommentsWhereUniqueInput
  /**
   * In case the CellComments found by the `where` argument doesn't exist, create a new CellComments with this data.
   */
  create: Prisma.XOR<Prisma.CellCommentsCreateInput, Prisma.CellCommentsUncheckedCreateInput>
  /**
   * In case the CellComments was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.CellCommentsUpdateInput, Prisma.CellCommentsUncheckedUpdateInput>
}

/**
 * CellComments delete
 */
export type CellCommentsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
  /**
   * Filter which CellComments to delete.
   */
  where: Prisma.CellCommentsWhereUniqueInput
}

/**
 * CellComments deleteMany
 */
export type CellCommentsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which CellComments to delete
   */
  where?: Prisma.CellCommentsWhereInput
  /**
   * Limit how many CellComments to delete.
   */
  limit?: number
}

/**
 * CellComments without action
 */
export type CellCommentsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the CellComments
   */
  select?: Prisma.CellCommentsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the CellComments
   */
  omit?: Prisma.CellCommentsOmit<ExtArgs> | null
}
