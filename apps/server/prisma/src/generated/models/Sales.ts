
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Sales` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Sales
 * 
 */
export type SalesModel = runtime.Types.Result.DefaultSelection<Prisma.$SalesPayload>

export type AggregateSales = {
  _count: SalesCountAggregateOutputType | null
  _avg: SalesAvgAggregateOutputType | null
  _sum: SalesSumAggregateOutputType | null
  _min: SalesMinAggregateOutputType | null
  _max: SalesMaxAggregateOutputType | null
}

export type SalesAvgAggregateOutputType = {
  id: number | null
  quantity: number | null
  unit_price: runtime.Decimal | null
  discount_percentage: runtime.Decimal | null
  total_amount: runtime.Decimal | null
}

export type SalesSumAggregateOutputType = {
  id: number | null
  quantity: number | null
  unit_price: runtime.Decimal | null
  discount_percentage: runtime.Decimal | null
  total_amount: runtime.Decimal | null
}

export type SalesMinAggregateOutputType = {
  id: number | null
  order_id: string | null
  customer_name: string | null
  customer_email: string | null
  customer_phone: string | null
  product_name: string | null
  product_sku: string | null
  quantity: number | null
  unit_price: runtime.Decimal | null
  discount_percentage: runtime.Decimal | null
  total_amount: runtime.Decimal | null
  payment_method: string | null
  order_date: Date | null
  delivery_date: Date | null
  region: string | null
}

export type SalesMaxAggregateOutputType = {
  id: number | null
  order_id: string | null
  customer_name: string | null
  customer_email: string | null
  customer_phone: string | null
  product_name: string | null
  product_sku: string | null
  quantity: number | null
  unit_price: runtime.Decimal | null
  discount_percentage: runtime.Decimal | null
  total_amount: runtime.Decimal | null
  payment_method: string | null
  order_date: Date | null
  delivery_date: Date | null
  region: string | null
}

export type SalesCountAggregateOutputType = {
  id: number
  order_id: number
  customer_name: number
  customer_email: number
  customer_phone: number
  product_name: number
  product_sku: number
  quantity: number
  unit_price: number
  discount_percentage: number
  total_amount: number
  payment_method: number
  order_date: number
  delivery_date: number
  region: number
  _all: number
}


export type SalesAvgAggregateInputType = {
  id?: true
  quantity?: true
  unit_price?: true
  discount_percentage?: true
  total_amount?: true
}

export type SalesSumAggregateInputType = {
  id?: true
  quantity?: true
  unit_price?: true
  discount_percentage?: true
  total_amount?: true
}

export type SalesMinAggregateInputType = {
  id?: true
  order_id?: true
  customer_name?: true
  customer_email?: true
  customer_phone?: true
  product_name?: true
  product_sku?: true
  quantity?: true
  unit_price?: true
  discount_percentage?: true
  total_amount?: true
  payment_method?: true
  order_date?: true
  delivery_date?: true
  region?: true
}

export type SalesMaxAggregateInputType = {
  id?: true
  order_id?: true
  customer_name?: true
  customer_email?: true
  customer_phone?: true
  product_name?: true
  product_sku?: true
  quantity?: true
  unit_price?: true
  discount_percentage?: true
  total_amount?: true
  payment_method?: true
  order_date?: true
  delivery_date?: true
  region?: true
}

export type SalesCountAggregateInputType = {
  id?: true
  order_id?: true
  customer_name?: true
  customer_email?: true
  customer_phone?: true
  product_name?: true
  product_sku?: true
  quantity?: true
  unit_price?: true
  discount_percentage?: true
  total_amount?: true
  payment_method?: true
  order_date?: true
  delivery_date?: true
  region?: true
  _all?: true
}

export type SalesAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Sales to aggregate.
   */
  where?: Prisma.SalesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sales to fetch.
   */
  orderBy?: Prisma.SalesOrderByWithRelationInput | Prisma.SalesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SalesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Sales
  **/
  _count?: true | SalesCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SalesAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SalesSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SalesMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SalesMaxAggregateInputType
}

export type GetSalesAggregateType<T extends SalesAggregateArgs> = {
      [P in keyof T & keyof AggregateSales]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSales[P]>
    : Prisma.GetScalarType<T[P], AggregateSales[P]>
}




export type SalesGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SalesWhereInput
  orderBy?: Prisma.SalesOrderByWithAggregationInput | Prisma.SalesOrderByWithAggregationInput[]
  by: Prisma.SalesScalarFieldEnum[] | Prisma.SalesScalarFieldEnum
  having?: Prisma.SalesScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SalesCountAggregateInputType | true
  _avg?: SalesAvgAggregateInputType
  _sum?: SalesSumAggregateInputType
  _min?: SalesMinAggregateInputType
  _max?: SalesMaxAggregateInputType
}

export type SalesGroupByOutputType = {
  id: number
  order_id: string
  customer_name: string
  customer_email: string
  customer_phone: string
  product_name: string
  product_sku: string
  quantity: number
  unit_price: runtime.Decimal
  discount_percentage: runtime.Decimal
  total_amount: runtime.Decimal
  payment_method: string
  order_date: Date
  delivery_date: Date
  region: string
  _count: SalesCountAggregateOutputType | null
  _avg: SalesAvgAggregateOutputType | null
  _sum: SalesSumAggregateOutputType | null
  _min: SalesMinAggregateOutputType | null
  _max: SalesMaxAggregateOutputType | null
}

type GetSalesGroupByPayload<T extends SalesGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SalesGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SalesGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SalesGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SalesGroupByOutputType[P]>
      }
    >
  >



export type SalesWhereInput = {
  AND?: Prisma.SalesWhereInput | Prisma.SalesWhereInput[]
  OR?: Prisma.SalesWhereInput[]
  NOT?: Prisma.SalesWhereInput | Prisma.SalesWhereInput[]
  id?: Prisma.IntFilter<"Sales"> | number
  order_id?: Prisma.StringFilter<"Sales"> | string
  customer_name?: Prisma.StringFilter<"Sales"> | string
  customer_email?: Prisma.StringFilter<"Sales"> | string
  customer_phone?: Prisma.StringFilter<"Sales"> | string
  product_name?: Prisma.StringFilter<"Sales"> | string
  product_sku?: Prisma.StringFilter<"Sales"> | string
  quantity?: Prisma.IntFilter<"Sales"> | number
  unit_price?: Prisma.DecimalFilter<"Sales"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  discount_percentage?: Prisma.DecimalFilter<"Sales"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  total_amount?: Prisma.DecimalFilter<"Sales"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  payment_method?: Prisma.StringFilter<"Sales"> | string
  order_date?: Prisma.DateTimeFilter<"Sales"> | Date | string
  delivery_date?: Prisma.DateTimeFilter<"Sales"> | Date | string
  region?: Prisma.StringFilter<"Sales"> | string
}

export type SalesOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  order_id?: Prisma.SortOrder
  customer_name?: Prisma.SortOrder
  customer_email?: Prisma.SortOrder
  customer_phone?: Prisma.SortOrder
  product_name?: Prisma.SortOrder
  product_sku?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  unit_price?: Prisma.SortOrder
  discount_percentage?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
  payment_method?: Prisma.SortOrder
  order_date?: Prisma.SortOrder
  delivery_date?: Prisma.SortOrder
  region?: Prisma.SortOrder
}

export type SalesWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  order_id?: string
  AND?: Prisma.SalesWhereInput | Prisma.SalesWhereInput[]
  OR?: Prisma.SalesWhereInput[]
  NOT?: Prisma.SalesWhereInput | Prisma.SalesWhereInput[]
  customer_name?: Prisma.StringFilter<"Sales"> | string
  customer_email?: Prisma.StringFilter<"Sales"> | string
  customer_phone?: Prisma.StringFilter<"Sales"> | string
  product_name?: Prisma.StringFilter<"Sales"> | string
  product_sku?: Prisma.StringFilter<"Sales"> | string
  quantity?: Prisma.IntFilter<"Sales"> | number
  unit_price?: Prisma.DecimalFilter<"Sales"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  discount_percentage?: Prisma.DecimalFilter<"Sales"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  total_amount?: Prisma.DecimalFilter<"Sales"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  payment_method?: Prisma.StringFilter<"Sales"> | string
  order_date?: Prisma.DateTimeFilter<"Sales"> | Date | string
  delivery_date?: Prisma.DateTimeFilter<"Sales"> | Date | string
  region?: Prisma.StringFilter<"Sales"> | string
}, "id" | "order_id">

export type SalesOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  order_id?: Prisma.SortOrder
  customer_name?: Prisma.SortOrder
  customer_email?: Prisma.SortOrder
  customer_phone?: Prisma.SortOrder
  product_name?: Prisma.SortOrder
  product_sku?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  unit_price?: Prisma.SortOrder
  discount_percentage?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
  payment_method?: Prisma.SortOrder
  order_date?: Prisma.SortOrder
  delivery_date?: Prisma.SortOrder
  region?: Prisma.SortOrder
  _count?: Prisma.SalesCountOrderByAggregateInput
  _avg?: Prisma.SalesAvgOrderByAggregateInput
  _max?: Prisma.SalesMaxOrderByAggregateInput
  _min?: Prisma.SalesMinOrderByAggregateInput
  _sum?: Prisma.SalesSumOrderByAggregateInput
}

export type SalesScalarWhereWithAggregatesInput = {
  AND?: Prisma.SalesScalarWhereWithAggregatesInput | Prisma.SalesScalarWhereWithAggregatesInput[]
  OR?: Prisma.SalesScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SalesScalarWhereWithAggregatesInput | Prisma.SalesScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Sales"> | number
  order_id?: Prisma.StringWithAggregatesFilter<"Sales"> | string
  customer_name?: Prisma.StringWithAggregatesFilter<"Sales"> | string
  customer_email?: Prisma.StringWithAggregatesFilter<"Sales"> | string
  customer_phone?: Prisma.StringWithAggregatesFilter<"Sales"> | string
  product_name?: Prisma.StringWithAggregatesFilter<"Sales"> | string
  product_sku?: Prisma.StringWithAggregatesFilter<"Sales"> | string
  quantity?: Prisma.IntWithAggregatesFilter<"Sales"> | number
  unit_price?: Prisma.DecimalWithAggregatesFilter<"Sales"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  discount_percentage?: Prisma.DecimalWithAggregatesFilter<"Sales"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  total_amount?: Prisma.DecimalWithAggregatesFilter<"Sales"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  payment_method?: Prisma.StringWithAggregatesFilter<"Sales"> | string
  order_date?: Prisma.DateTimeWithAggregatesFilter<"Sales"> | Date | string
  delivery_date?: Prisma.DateTimeWithAggregatesFilter<"Sales"> | Date | string
  region?: Prisma.StringWithAggregatesFilter<"Sales"> | string
}

export type SalesCreateInput = {
  order_id: string
  customer_name: string
  customer_email: string
  customer_phone: string
  product_name: string
  product_sku: string
  quantity: number
  unit_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  discount_percentage: runtime.Decimal | runtime.DecimalJsLike | number | string
  total_amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  payment_method: string
  order_date: Date | string
  delivery_date: Date | string
  region: string
}

export type SalesUncheckedCreateInput = {
  id?: number
  order_id: string
  customer_name: string
  customer_email: string
  customer_phone: string
  product_name: string
  product_sku: string
  quantity: number
  unit_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  discount_percentage: runtime.Decimal | runtime.DecimalJsLike | number | string
  total_amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  payment_method: string
  order_date: Date | string
  delivery_date: Date | string
  region: string
}

export type SalesUpdateInput = {
  order_id?: Prisma.StringFieldUpdateOperationsInput | string
  customer_name?: Prisma.StringFieldUpdateOperationsInput | string
  customer_email?: Prisma.StringFieldUpdateOperationsInput | string
  customer_phone?: Prisma.StringFieldUpdateOperationsInput | string
  product_name?: Prisma.StringFieldUpdateOperationsInput | string
  product_sku?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  unit_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  discount_percentage?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  total_amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payment_method?: Prisma.StringFieldUpdateOperationsInput | string
  order_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  delivery_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  region?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SalesUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  order_id?: Prisma.StringFieldUpdateOperationsInput | string
  customer_name?: Prisma.StringFieldUpdateOperationsInput | string
  customer_email?: Prisma.StringFieldUpdateOperationsInput | string
  customer_phone?: Prisma.StringFieldUpdateOperationsInput | string
  product_name?: Prisma.StringFieldUpdateOperationsInput | string
  product_sku?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  unit_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  discount_percentage?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  total_amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payment_method?: Prisma.StringFieldUpdateOperationsInput | string
  order_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  delivery_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  region?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SalesCreateManyInput = {
  id?: number
  order_id: string
  customer_name: string
  customer_email: string
  customer_phone: string
  product_name: string
  product_sku: string
  quantity: number
  unit_price: runtime.Decimal | runtime.DecimalJsLike | number | string
  discount_percentage: runtime.Decimal | runtime.DecimalJsLike | number | string
  total_amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  payment_method: string
  order_date: Date | string
  delivery_date: Date | string
  region: string
}

export type SalesUpdateManyMutationInput = {
  order_id?: Prisma.StringFieldUpdateOperationsInput | string
  customer_name?: Prisma.StringFieldUpdateOperationsInput | string
  customer_email?: Prisma.StringFieldUpdateOperationsInput | string
  customer_phone?: Prisma.StringFieldUpdateOperationsInput | string
  product_name?: Prisma.StringFieldUpdateOperationsInput | string
  product_sku?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  unit_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  discount_percentage?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  total_amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payment_method?: Prisma.StringFieldUpdateOperationsInput | string
  order_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  delivery_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  region?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SalesUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  order_id?: Prisma.StringFieldUpdateOperationsInput | string
  customer_name?: Prisma.StringFieldUpdateOperationsInput | string
  customer_email?: Prisma.StringFieldUpdateOperationsInput | string
  customer_phone?: Prisma.StringFieldUpdateOperationsInput | string
  product_name?: Prisma.StringFieldUpdateOperationsInput | string
  product_sku?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  unit_price?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  discount_percentage?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  total_amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  payment_method?: Prisma.StringFieldUpdateOperationsInput | string
  order_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  delivery_date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  region?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SalesCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order_id?: Prisma.SortOrder
  customer_name?: Prisma.SortOrder
  customer_email?: Prisma.SortOrder
  customer_phone?: Prisma.SortOrder
  product_name?: Prisma.SortOrder
  product_sku?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  unit_price?: Prisma.SortOrder
  discount_percentage?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
  payment_method?: Prisma.SortOrder
  order_date?: Prisma.SortOrder
  delivery_date?: Prisma.SortOrder
  region?: Prisma.SortOrder
}

export type SalesAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  unit_price?: Prisma.SortOrder
  discount_percentage?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
}

export type SalesMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order_id?: Prisma.SortOrder
  customer_name?: Prisma.SortOrder
  customer_email?: Prisma.SortOrder
  customer_phone?: Prisma.SortOrder
  product_name?: Prisma.SortOrder
  product_sku?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  unit_price?: Prisma.SortOrder
  discount_percentage?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
  payment_method?: Prisma.SortOrder
  order_date?: Prisma.SortOrder
  delivery_date?: Prisma.SortOrder
  region?: Prisma.SortOrder
}

export type SalesMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  order_id?: Prisma.SortOrder
  customer_name?: Prisma.SortOrder
  customer_email?: Prisma.SortOrder
  customer_phone?: Prisma.SortOrder
  product_name?: Prisma.SortOrder
  product_sku?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  unit_price?: Prisma.SortOrder
  discount_percentage?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
  payment_method?: Prisma.SortOrder
  order_date?: Prisma.SortOrder
  delivery_date?: Prisma.SortOrder
  region?: Prisma.SortOrder
}

export type SalesSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  unit_price?: Prisma.SortOrder
  discount_percentage?: Prisma.SortOrder
  total_amount?: Prisma.SortOrder
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}



export type SalesSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  order_id?: boolean
  customer_name?: boolean
  customer_email?: boolean
  customer_phone?: boolean
  product_name?: boolean
  product_sku?: boolean
  quantity?: boolean
  unit_price?: boolean
  discount_percentage?: boolean
  total_amount?: boolean
  payment_method?: boolean
  order_date?: boolean
  delivery_date?: boolean
  region?: boolean
}, ExtArgs["result"]["sales"]>

export type SalesSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  order_id?: boolean
  customer_name?: boolean
  customer_email?: boolean
  customer_phone?: boolean
  product_name?: boolean
  product_sku?: boolean
  quantity?: boolean
  unit_price?: boolean
  discount_percentage?: boolean
  total_amount?: boolean
  payment_method?: boolean
  order_date?: boolean
  delivery_date?: boolean
  region?: boolean
}, ExtArgs["result"]["sales"]>

export type SalesSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  order_id?: boolean
  customer_name?: boolean
  customer_email?: boolean
  customer_phone?: boolean
  product_name?: boolean
  product_sku?: boolean
  quantity?: boolean
  unit_price?: boolean
  discount_percentage?: boolean
  total_amount?: boolean
  payment_method?: boolean
  order_date?: boolean
  delivery_date?: boolean
  region?: boolean
}, ExtArgs["result"]["sales"]>

export type SalesSelectScalar = {
  id?: boolean
  order_id?: boolean
  customer_name?: boolean
  customer_email?: boolean
  customer_phone?: boolean
  product_name?: boolean
  product_sku?: boolean
  quantity?: boolean
  unit_price?: boolean
  discount_percentage?: boolean
  total_amount?: boolean
  payment_method?: boolean
  order_date?: boolean
  delivery_date?: boolean
  region?: boolean
}

export type SalesOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "order_id" | "customer_name" | "customer_email" | "customer_phone" | "product_name" | "product_sku" | "quantity" | "unit_price" | "discount_percentage" | "total_amount" | "payment_method" | "order_date" | "delivery_date" | "region", ExtArgs["result"]["sales"]>

export type $SalesPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Sales"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    order_id: string
    customer_name: string
    customer_email: string
    customer_phone: string
    product_name: string
    product_sku: string
    quantity: number
    unit_price: runtime.Decimal
    discount_percentage: runtime.Decimal
    total_amount: runtime.Decimal
    payment_method: string
    order_date: Date
    delivery_date: Date
    region: string
  }, ExtArgs["result"]["sales"]>
  composites: {}
}

export type SalesGetPayload<S extends boolean | null | undefined | SalesDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SalesPayload, S>

export type SalesCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SalesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SalesCountAggregateInputType | true
  }

export interface SalesDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sales'], meta: { name: 'Sales' } }
  /**
   * Find zero or one Sales that matches the filter.
   * @param {SalesFindUniqueArgs} args - Arguments to find a Sales
   * @example
   * // Get one Sales
   * const sales = await prisma.sales.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SalesFindUniqueArgs>(args: Prisma.SelectSubset<T, SalesFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SalesClient<runtime.Types.Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Sales that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SalesFindUniqueOrThrowArgs} args - Arguments to find a Sales
   * @example
   * // Get one Sales
   * const sales = await prisma.sales.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SalesFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SalesFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SalesClient<runtime.Types.Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Sales that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalesFindFirstArgs} args - Arguments to find a Sales
   * @example
   * // Get one Sales
   * const sales = await prisma.sales.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SalesFindFirstArgs>(args?: Prisma.SelectSubset<T, SalesFindFirstArgs<ExtArgs>>): Prisma.Prisma__SalesClient<runtime.Types.Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Sales that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalesFindFirstOrThrowArgs} args - Arguments to find a Sales
   * @example
   * // Get one Sales
   * const sales = await prisma.sales.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SalesFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SalesFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SalesClient<runtime.Types.Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Sales that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalesFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Sales
   * const sales = await prisma.sales.findMany()
   * 
   * // Get first 10 Sales
   * const sales = await prisma.sales.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const salesWithIdOnly = await prisma.sales.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SalesFindManyArgs>(args?: Prisma.SelectSubset<T, SalesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Sales.
   * @param {SalesCreateArgs} args - Arguments to create a Sales.
   * @example
   * // Create one Sales
   * const Sales = await prisma.sales.create({
   *   data: {
   *     // ... data to create a Sales
   *   }
   * })
   * 
   */
  create<T extends SalesCreateArgs>(args: Prisma.SelectSubset<T, SalesCreateArgs<ExtArgs>>): Prisma.Prisma__SalesClient<runtime.Types.Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Sales.
   * @param {SalesCreateManyArgs} args - Arguments to create many Sales.
   * @example
   * // Create many Sales
   * const sales = await prisma.sales.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SalesCreateManyArgs>(args?: Prisma.SelectSubset<T, SalesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Sales and returns the data saved in the database.
   * @param {SalesCreateManyAndReturnArgs} args - Arguments to create many Sales.
   * @example
   * // Create many Sales
   * const sales = await prisma.sales.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Sales and only return the `id`
   * const salesWithIdOnly = await prisma.sales.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SalesCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SalesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Sales.
   * @param {SalesDeleteArgs} args - Arguments to delete one Sales.
   * @example
   * // Delete one Sales
   * const Sales = await prisma.sales.delete({
   *   where: {
   *     // ... filter to delete one Sales
   *   }
   * })
   * 
   */
  delete<T extends SalesDeleteArgs>(args: Prisma.SelectSubset<T, SalesDeleteArgs<ExtArgs>>): Prisma.Prisma__SalesClient<runtime.Types.Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Sales.
   * @param {SalesUpdateArgs} args - Arguments to update one Sales.
   * @example
   * // Update one Sales
   * const sales = await prisma.sales.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SalesUpdateArgs>(args: Prisma.SelectSubset<T, SalesUpdateArgs<ExtArgs>>): Prisma.Prisma__SalesClient<runtime.Types.Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Sales.
   * @param {SalesDeleteManyArgs} args - Arguments to filter Sales to delete.
   * @example
   * // Delete a few Sales
   * const { count } = await prisma.sales.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SalesDeleteManyArgs>(args?: Prisma.SelectSubset<T, SalesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalesUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Sales
   * const sales = await prisma.sales.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SalesUpdateManyArgs>(args: Prisma.SelectSubset<T, SalesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Sales and returns the data updated in the database.
   * @param {SalesUpdateManyAndReturnArgs} args - Arguments to update many Sales.
   * @example
   * // Update many Sales
   * const sales = await prisma.sales.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Sales and only return the `id`
   * const salesWithIdOnly = await prisma.sales.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SalesUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SalesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Sales.
   * @param {SalesUpsertArgs} args - Arguments to update or create a Sales.
   * @example
   * // Update or create a Sales
   * const sales = await prisma.sales.upsert({
   *   create: {
   *     // ... data to create a Sales
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Sales we want to update
   *   }
   * })
   */
  upsert<T extends SalesUpsertArgs>(args: Prisma.SelectSubset<T, SalesUpsertArgs<ExtArgs>>): Prisma.Prisma__SalesClient<runtime.Types.Result.GetResult<Prisma.$SalesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalesCountArgs} args - Arguments to filter Sales to count.
   * @example
   * // Count the number of Sales
   * const count = await prisma.sales.count({
   *   where: {
   *     // ... the filter for the Sales we want to count
   *   }
   * })
  **/
  count<T extends SalesCountArgs>(
    args?: Prisma.Subset<T, SalesCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SalesCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SalesAggregateArgs>(args: Prisma.Subset<T, SalesAggregateArgs>): Prisma.PrismaPromise<GetSalesAggregateType<T>>

  /**
   * Group by Sales.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SalesGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SalesGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SalesGroupByArgs['orderBy'] }
      : { orderBy?: SalesGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SalesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Sales model
 */
readonly fields: SalesFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Sales.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SalesClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Sales model
 */
export interface SalesFieldRefs {
  readonly id: Prisma.FieldRef<"Sales", 'Int'>
  readonly order_id: Prisma.FieldRef<"Sales", 'String'>
  readonly customer_name: Prisma.FieldRef<"Sales", 'String'>
  readonly customer_email: Prisma.FieldRef<"Sales", 'String'>
  readonly customer_phone: Prisma.FieldRef<"Sales", 'String'>
  readonly product_name: Prisma.FieldRef<"Sales", 'String'>
  readonly product_sku: Prisma.FieldRef<"Sales", 'String'>
  readonly quantity: Prisma.FieldRef<"Sales", 'Int'>
  readonly unit_price: Prisma.FieldRef<"Sales", 'Decimal'>
  readonly discount_percentage: Prisma.FieldRef<"Sales", 'Decimal'>
  readonly total_amount: Prisma.FieldRef<"Sales", 'Decimal'>
  readonly payment_method: Prisma.FieldRef<"Sales", 'String'>
  readonly order_date: Prisma.FieldRef<"Sales", 'DateTime'>
  readonly delivery_date: Prisma.FieldRef<"Sales", 'DateTime'>
  readonly region: Prisma.FieldRef<"Sales", 'String'>
}
    

// Custom InputTypes
/**
 * Sales findUnique
 */
export type SalesFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
  /**
   * Filter, which Sales to fetch.
   */
  where: Prisma.SalesWhereUniqueInput
}

/**
 * Sales findUniqueOrThrow
 */
export type SalesFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
  /**
   * Filter, which Sales to fetch.
   */
  where: Prisma.SalesWhereUniqueInput
}

/**
 * Sales findFirst
 */
export type SalesFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
  /**
   * Filter, which Sales to fetch.
   */
  where?: Prisma.SalesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sales to fetch.
   */
  orderBy?: Prisma.SalesOrderByWithRelationInput | Prisma.SalesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Sales.
   */
  cursor?: Prisma.SalesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Sales.
   */
  distinct?: Prisma.SalesScalarFieldEnum | Prisma.SalesScalarFieldEnum[]
}

/**
 * Sales findFirstOrThrow
 */
export type SalesFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
  /**
   * Filter, which Sales to fetch.
   */
  where?: Prisma.SalesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sales to fetch.
   */
  orderBy?: Prisma.SalesOrderByWithRelationInput | Prisma.SalesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Sales.
   */
  cursor?: Prisma.SalesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sales.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Sales.
   */
  distinct?: Prisma.SalesScalarFieldEnum | Prisma.SalesScalarFieldEnum[]
}

/**
 * Sales findMany
 */
export type SalesFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
  /**
   * Filter, which Sales to fetch.
   */
  where?: Prisma.SalesWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Sales to fetch.
   */
  orderBy?: Prisma.SalesOrderByWithRelationInput | Prisma.SalesOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Sales.
   */
  cursor?: Prisma.SalesWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Sales from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Sales.
   */
  skip?: number
  distinct?: Prisma.SalesScalarFieldEnum | Prisma.SalesScalarFieldEnum[]
}

/**
 * Sales create
 */
export type SalesCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
  /**
   * The data needed to create a Sales.
   */
  data: Prisma.XOR<Prisma.SalesCreateInput, Prisma.SalesUncheckedCreateInput>
}

/**
 * Sales createMany
 */
export type SalesCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Sales.
   */
  data: Prisma.SalesCreateManyInput | Prisma.SalesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Sales createManyAndReturn
 */
export type SalesCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
  /**
   * The data used to create many Sales.
   */
  data: Prisma.SalesCreateManyInput | Prisma.SalesCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Sales update
 */
export type SalesUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
  /**
   * The data needed to update a Sales.
   */
  data: Prisma.XOR<Prisma.SalesUpdateInput, Prisma.SalesUncheckedUpdateInput>
  /**
   * Choose, which Sales to update.
   */
  where: Prisma.SalesWhereUniqueInput
}

/**
 * Sales updateMany
 */
export type SalesUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Sales.
   */
  data: Prisma.XOR<Prisma.SalesUpdateManyMutationInput, Prisma.SalesUncheckedUpdateManyInput>
  /**
   * Filter which Sales to update
   */
  where?: Prisma.SalesWhereInput
  /**
   * Limit how many Sales to update.
   */
  limit?: number
}

/**
 * Sales updateManyAndReturn
 */
export type SalesUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
  /**
   * The data used to update Sales.
   */
  data: Prisma.XOR<Prisma.SalesUpdateManyMutationInput, Prisma.SalesUncheckedUpdateManyInput>
  /**
   * Filter which Sales to update
   */
  where?: Prisma.SalesWhereInput
  /**
   * Limit how many Sales to update.
   */
  limit?: number
}

/**
 * Sales upsert
 */
export type SalesUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
  /**
   * The filter to search for the Sales to update in case it exists.
   */
  where: Prisma.SalesWhereUniqueInput
  /**
   * In case the Sales found by the `where` argument doesn't exist, create a new Sales with this data.
   */
  create: Prisma.XOR<Prisma.SalesCreateInput, Prisma.SalesUncheckedCreateInput>
  /**
   * In case the Sales was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SalesUpdateInput, Prisma.SalesUncheckedUpdateInput>
}

/**
 * Sales delete
 */
export type SalesDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
  /**
   * Filter which Sales to delete.
   */
  where: Prisma.SalesWhereUniqueInput
}

/**
 * Sales deleteMany
 */
export type SalesDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Sales to delete
   */
  where?: Prisma.SalesWhereInput
  /**
   * Limit how many Sales to delete.
   */
  limit?: number
}

/**
 * Sales without action
 */
export type SalesDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Sales
   */
  select?: Prisma.SalesSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Sales
   */
  omit?: Prisma.SalesOmit<ExtArgs> | null
}
